Linked Lists
- Singly linked lists have pointers to next node
- Doubly linked lists have pointers to next and previous nodes
- May use runner where two pointers iterate simultaneously

Binary Tree
- Have left, right and parent pointers
- Binary search trees good for searching
- Balanced binary trees are optimal

Graphs
- Implemented with adjacency matrices or lists
- Breadth first search searches neighbouring nodes first using a queue
- BFS gives path with least edges/vertices and can be performed faster by searching from both the start and end nodes
- Depth first search searches one path first using an (implicit) stack via recursion
- DFS tree only contains back edges if there is a cycle
- Articulation vertices can be found from DFS tree if they are non-leaf nodes with back edges in descendants
- Reverse order in which vertices are processed gives a topological sort

Stacks/Queues
- Stacks are last in first out (stack of plates)
- Queues are first in first out (queue of people)
- Can both be implemented with arrays/linked lists

Heaps
- Efficient implementation of priority queue (insert and extract min/max)
- Partially ordered using a binary tree where child elements are all greater/smaller than parent
- Binary tree can be implicitly stored in an array with each layer doubling in size
- To add elements, add to last position and swap with parent until high enough
- Min/max can be removed by replacing with last element and swapping with children until low enough
- These operations are linear with the height and logarithmic with number of nodes

Hash Tables
- Unordered map in C++
- Map keys to values using a hash function
- Constant time read/write operations in average case, linear in worst case

Merge Sort
- Splits array in half and recursively calls mergesort until only single elements are left
- Sorted smaller arrays are merged together by taking the smallest element of each sorted array repeatedly
- Merging is linear with with the number of elements and the recursion tree is O(log n) deep
- Overall time complexity is O(n log n)
- Linear space complexity as subarrays need to be created in each call

Quick Sort
- Randomly selects an element and swaps all lower elements to left and higher elements to right
- On average, there will be O(log n) recursive calls, with linear work for each partition
- Average case time is O(n log n) with O(log n) space for calls on the stack
- Worst case time is O(n^2) with O(n) space for calls on the stack

Tries
- Type of tree to represent strings
- Each edge (or vertex) has a character and the path from the root to a leaf represents a string
- Fast lookup of strings from prefixes

Vector Amortised Time
- Incorporates the linear time required to double the size of a vector and the constant time for most operations
- When inserting n elements, the vector doubles at sizes 1, 2, 4, ..., n in linear time
- This is equal to n + n/2 + n/4 + ... + 1 and is approximately equal to 2n
- Amortised (average) time to insert one element is constant

Bit Manipulation
- AND (&) OR (|) NOT (~) XOR (^) are basic operators
- Left shift (<<) essentially multiplies by 2 and right shift >> divides by 2 (losing last bit)
- Negative number -K stored as two's complement where first bit is for sign and the remaining bits represent 2^(n-1) - K
- Negating a number is same is inverting all bits and adding 1

Singleton Design Pattern
- Object with only one instance and global access
- Sometimes undesirable 'anti-pattern' and can interfere with unit testing
- Create a private static instance, public static getter that initialises it if necessary, private constructors and delete the copy constructor

Factory Design Pattern
- Interface for creating instances of a class
- Pass in specific type and the factory object will create the child object of the correct type
- Takes responsibility of object instantiation from the client program into the factory class

Union-Find
- Represents a set partition of elements
- Allows efficiency for both merging subsets (union) and checking which subset an element is in (find)
- Represents subsets as an (implicit) backwards tree using an array of indices, an array of subset sizes and number of elements 
- Each element has a pointer to a parent with a root node defining a subset
- Find is implemented by traversing parent pointers to root
- Union is implemented by making root of smaller subtree the child of the other root
- Height is at most log n and so union and find can be done in logarithmic time

Quickselect
- Finds the kth smallest element in an unordered list
- Implements quicksort but discards second half
- If index of pivot is more than k, recursively calls on the left half and vice versa until index of pivot is equal to k
- Worst case complexity is still O(n^2) but expected case is reduced from O(n log n) to O(n)

Balanced Binary Search Tree (AVL, Red Black Trees)
- 

Minimum Spanning Tree
- Tree of all vertices in graph with minimum total weight (n vertices and m edges)
- Prim's algorithm adds smallest weight edge between current tree and a non-tree vertex
- Can run in O(n^2) time or O(m + n log n) using sophisticated priority queues
- Kruskal's algorithm adds smallest weight edges between unconnected components
- Basic implementation uses BFS or DFS to check components giving an mn time algorithm
- Connected components can be stored in union-find allowing O(m log m) time which is faster for sparse graphs

Dijkstra's Shortest Path
- Finds the shortest path from one vertex to every other vertex on positive weighted graphs
- Repeatedly adds a new vertex with the shortest distance from the origin
- Runs in O(n^2) time as n vertices are added with linear work to find the smallest each time

Bellman-Ford Shortest Path
- Slower than Dijkstra but works on negative edge weights and can detect negative cycles
- Assumes all path lengths are infinite and then iteratively relaxes
- For each vertex, updates path distance for outgoing edge to relax all edges in each iteration
- For an n vertex graph, paths only have to be relaxed n-1 times so any more iterations means a negative cycle
- Average and worst case time complexity is O(mn)